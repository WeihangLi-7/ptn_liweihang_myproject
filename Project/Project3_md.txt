## Project 3. PurZ0 & PurZ 的 SSN、GNN、以及进化树的构建

ddl 2025.4.16

1. ##### Merge the PurZ0s you got from ncbi nr and IMG/VR v4, remove duplicates, and use the nonredundant PurZ0s to make a SSN. Please display the SSN at E-value cutoffs 10-75 and 10-120。 Mapping PDB structures, function-known sequences and key residues for NTP substrate binding to the SNN with E-value cutoff 10-75, respectively.

   #通过cdhit：-c 0.99999来remove duplicates

   ```bash
    cd-hit -i purz0.fasta -o Filtered.purz0.fasta -c 0.99999999 -T 8  
   ```

   登陆EFI - Genome Neighborhood Tool网站，将文件以Fasta的格式提交后，即可生成结果（将发至所填邮箱）：

   网站地址：https://efi.igb.illinois.edu/efi-est/

   在**Dataset Analysis**可以看到如下图，该图对于Alignment Score的选择有指导意义：

   ![截屏2025-04-11 14.50.03](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-11 14.50.03.png)

   之后可以在Cytospace中查看结果（xgmma格式）选择不同的Layout将结果可视化

   ![截屏2025-04-11 14.52.02](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-11 14.52.02.png)

   在Node Table上方可以以CSV格式导出/导入注释，左边的Filter，Style，Annotation可以用自己喜欢的方式展示结果，并且标注一些已经研究的比较清楚的序列（比如已知结构，已知功能...）

   1. **Mapping PDB structure **

      ![截屏2025-04-11 14.55.05](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-11 14.55.05.png)

      ![截屏2025-04-11 20.30.19](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-11 20.30.19.png)

      在PDB网站上检索，发现PurZ0结构极少，只发现两条。需注意的是，其中7ODX存在于序列中，但在PDB中的描述为PurZ。

      将其在图中标记出来(绿色)：

      ![](/Users/liweihang/BT1051/Project3/1_Image/PDB75.png)

      ![PDB120](/Users/liweihang/BT1051/Project3/1_Image/PDB120.png)

      图：在Alignment Score = 120与75下7VF6和7ODX的位置

      

   2. **Funtion known sequences**

      蓝色：Adenylosuccinate synthase activity|**GTP** binding

      粉色：Adenylosuccinate synthase activity|**ATP** binding

      ![](/Users/liweihang/BT1051/Project3/1_Image/purz0_Function_AS120 Full Network.png)

      ![purz0_Funtion_AS75](/Users/liweihang/BT1051/Project3/1_Image/purz0_Funtion_AS75.png)

   3. **Key Residues**

      首先用ChimeraX找到PurZ0与底物结合的关键氨基酸(PDB:7vf6)

      ![截屏2025-04-11 15.39.57](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-11 15.39.57.png)

      记录关键Residues(标粗为后续做区分的residues，其中斜体标出的Serine15，Isoleucine244和AspasticAcid为之前做区分的residues，这里不再用这三个residues区分)：*SER15,*    **VAL49**， **ARG56, TYR190**, *Ile244*，**THR270**, MET304, *ASP306*,GLN307,**ARG276**,ASN341, **THR349** （共6个residues）

      1. 先用mafft比对：

         ```bash
         mafft --add Filtered.purz0.fasta --keeplength 7VF6_A.fa > aligned_output.fasta
         ```

         ```python
         # 读取比对文件并提取所需位置的氨基酸
         def extract_amino_acids(file_path, positions):
             with open(file_path, 'r') as f:
                 output = []
                 header = ""
                 seq = ""
         
                 for line in f:
                     line = line.strip()
                     if line.startswith(">"):
                         if seq:
                             # 处理上一个序列
                             clean_seq = seq.replace("-", "")  # 可选：是否剔除gap
                             selected_aa = [seq[p - 1] if p <= len(seq) else '-' for p in positions]
                             output.append([header, *selected_aa])
                             seq = ""
                         header = line[1:].split()[0]  # 去掉">"并取ID
                     else:
                         seq += line  # 累积多行序列
         
                 # 处理最后一个序列
                 if seq:
                     clean_seq = seq.replace("-", "")  # 可选：是否剔除gap
                     selected_aa = [seq[p - 1] if p <= len(seq) else '-' for p in positions]
                     output.append([header, *selected_aa])
         
             return output
         
         # 设置目标位置
         positions = [49, 56, 190, 270, 276, 349]
         file_path = '/Users/liweihang/BT1051/Project3/1_/aligned_output.fasta'
         
         # 获取结果
         result = extract_amino_acids(file_path, positions)
         
         # 写入CSV
         import csv
         with open("selected_amino_acids.csv", "w", newline="") as f:
             writer = csv.writer(f)
             writer.writerow(["Sequence_ID", "KA49", "KA56", "KA190", "KA270", "KA276", "KA349"])
             writer.writerows(result)
         
         print("✅ 已输出至 selected_amino_acids.csv")
         
         ```

         结果一览：将这些residues导入到csv文件中

   ##### 

   ```python
   import csv
   
   # 输入文件路径
   keyresidue_file = "/Users/liweihang/BT1051/Project3/1_/PurZ0_KeyResidues.csv"
   as75_file = "/Users/liweihang/BT1051/Project3/1_/purz0_AS75.csv"
   output_file = "/Users/liweihang/BT1051/Project3/1_/merged_purz0_AS75.csv"
   
   # 读取关键残基数据
   key_data = {}
   with open(keyresidue_file, newline='') as f:
       reader = csv.reader(f)
       residue_header = next(reader)[1:]  # 除去 Sequence_ID
       for row in reader:
           key_data[row[0]] = row[1:]
   
   # 合并进 AS75
   with open(as75_file, newline='') as f_in, open(output_file, 'w', newline='') as f_out:
       reader = csv.reader(f_in)
       writer = csv.writer(f_out)
   
       header = next(reader)
       header += residue_header
       writer.writerow(header)
   
       for row in reader:
           desc = row[4].strip('"')  # 第5列是 "Description"
           extra = key_data.get(desc, [''] * len(residue_header))
           writer.writerow(row + extra)
   
   print("✅ 合并完成，结果写入：", output_file)
   
   ```

   将新生成的文件merged_nodetable_with_positions.csv导入到cytospace：

   ![截屏2025-04-11 19.50.52](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-11 19.50.52.png)

   可以看到已经成功导入，之后根据这些氨基酸的排列组合即可作图

   先统计每个位点氨基酸的次数：

   ```python
   import csv
   from collections import defaultdict
   
   # 输入文件路径
   file_path = '/Users/liweihang/BT1051/Project3/1_/merged_purz0.csv'
   
   # 存储结果：每列一个字典
   column_counts = defaultdict(lambda: defaultdict(int))
   
   # 读取 CSV 文件
   with open(file_path, 'r', encoding='utf-8') as f:
       reader = csv.DictReader(f)
       
       # 找出所有以 KA 开头的列
       ka_columns = [col for col in reader.fieldnames if col.startswith("KA")]
   
       # 遍历每一行，统计各列中字符出现频率
       for row in reader:
           for col in ka_columns:
               val = row[col].strip()
               column_counts[col][val] += 1
   
   # 输出结果
   for col in ka_columns:
       print(f"\n{col} - Amino Acid Frequency:")
       for aa, count in sorted(column_counts[col].items(), key=lambda x: -x[1]):
           print(f"  {aa}: {count}")
   
   ```

   结果如下：

   ```bash
   KA49 - Amino Acid Frequency:
     T: 1003
     S: 179
     K: 162
     Q: 48
     R: 21
     L: 12
     C: 12
     V: 9
     M: 9
     W: 8
     I: 7
     N: 4
     F: 2
     G: 1
     H: 1
     Y: 1
   
   KA56 - Amino Acid Frequency:
     K: 414
     P: 286
     A: 127
     -: 114
     V: 110
     T: 84
     R: 83
     E: 73
     L: 50
     S: 25
     I: 23
     H: 19
     N: 18
     Q: 18
     M: 12
     G: 9
     D: 5
     Y: 4
     F: 3
     C: 2
   
   KA190 - Amino Acid Frequency:
     Y: 403
     F: 345
     T: 305
     S: 291
     A: 28
     W: 18
     I: 16
     Q: 14
     H: 14
     C: 13
     M: 13
     V: 12
     L: 6
     G: 1
   
   KA270 - Amino Acid Frequency:
     T: 1018
     S: 459
     A: 1
     V: 1
   
   KA276 - Amino Acid Frequency:
     R: 1478
     M: 1
   
   KA349 - Amino Acid Frequency:
     T: 1026
     F: 145
     K: 65
     Y: 55
     V: 36
     W: 27
     L: 23
     I: 20
     H: 16
     N: 14
     G: 14
     -: 11
     S: 8
     R: 6
     C: 4
     M: 3
     A: 2
     D: 2
     E: 2
   ```

   **PurZ0酶活口袋氨基酸**

   组合一（绿色）：49T,  190Y

   组合二（红色）：49T,  190F

   组合三（蓝色）：49T,  190T

   组合四（橙色）：49T,  190S

   组合五（紫色）：49S, 190Y

   组合六（粉色）：49S, 190F

   组合七（黄色）：49S, 190T

   组合八（粽色）：49S, 190S

   

   还有些不属于上述的，为灰色

   ![](/Users/liweihang/BT1051/Project3/1_Image/KEYAA75.png)

   ![KEYAA120](/Users/liweihang/BT1051/Project3/1_Image/KEYAA120.png)

   

2. ##### Based PurZ0’s SNN (now you should display it at a more stringent E-value cutoff, to make sure each cluster is isofunctional), make a GNN. From your GNN, can you infer how many different pathways PurZ0s may engage in?

   在该网站上上传xgmml格式的文件即可：https://efi.igb.illinois.edu/efi-gnt/

   如下图所示，可能PurZ0s可能参与了有8种pathways：

   ![](/Users/liweihang/BT1051/Project3/2_Image/GNN.png)

3. **Please also make a SNN and a GNN for PurZs, similar to what you’ve done for PurZ0s.** 

   选用比对序列：PDBid：6FM0

   ```
   >sp|G3FFN6|PURZ_BPVC8 N6-succino-2-amino-2'-deoxyadenylate synthase OS=Vibrio phage phiVC8 OX=1076759 GN=purZ PE=1 SV=1
   MKNVDLVIDLQFGSTGKGLIAGYLAEKNGYDTVINANMPNAGHTYINAEGRKWMHKVLPN
   GIVSPNLKRVMLGAGSVFSINRLMEEIEMSKDLLHDKVAILIHPMATVLDEEAHKKAEVG
   IATSIGSTGQGSMAAMVEKLQRDPTNNTIVARDVAQYDGRIAQYVCTVEEWDMALMASER
   ILAEGAQGFSLSLNQEFYPYCTSRDCTPARFLADMGIPLPMLNKVIGTARCHPIRVGGTS
   GGHYPDQEELTWEQLGQVPELTTVTKKVRRVFSFSFIQMQKAMWTCQPDEVFLNFCNYLS
   PMGWQDIVHQIEVAAQSRYCDAEVKYLGFGPTFNDVELREDVM
   ```

   ```bash
   #检索IMGVR中的PurZ序列
   blastp \
     -query /Users/liweihang/BT1051/Project3/3_/PurZ_Template.fa \
     -db /Volumes/Elements/DB_IMGVR4/makeBLASTdbAlready/protein_hc.fna \
     -evalue 1e-5 \
     -outfmt "6 sacc staxid qcovs pident evalue bitscore sseq" \
     -max_target_seqs 5000000 \
     -num_threads 8 \
     -out /Users/liweihang/BT1051/Project3/3_/q2_IMGVR_blast_results.txt
   ```

   ```bash
   #检索nr库中的PurZ序列
   blastp \
   -query /public/home/guest1/compbio_2025/liwh/Project3/PurZ_Template.fa \
   -db  \
   -out IMGVR_q2_blast_results.txt \
   -evalue 1e-5 \
   -num_threads 10 \
   -max_target_seqs 5000000 \
   -outfmt "6 sacc staxid qcovs pident evalue bitscore sseq"
   ```

   将结果合并，并用以下代码保留PurZ，去除PurA和PurZ0的污染：

   PurZ关键氨基酸：S14, I234, N297

   ```bash
   #提取序列到一个fasta文件
   cat PurZ_IMGVR_blast_results.txt PurZ_nr_blast_results.txt | \
   awk '{print ">"$1"\n"$NF}' > PurZ_combined.faa
   #统计序列数量
   (BT1051) liweihang@Mac-3 4_ % grep -c "^>" /Users/liweihang/BT1051/Project3/4_/PurZ_combined.faa
   
   19873
   
   #seqkit去冗余
   (BT1051) liweihang@Mac-3 3_ % seqkit rmdup -s -i -o PurZ_unique.fasta /Users/liweihang/BT1051/Project3/3_/PurZ_combined.fasta
   
   [INFO] 3502 duplicated records removed
   #多序列比对：
   mafft --add /Users/liweihang/BT1051/Project3/3_/PurZ_unique.fasta --keeplength /Users/liweihang/BT1051/Project3/3_/PurZ_Template.fa > PurZ_aligned_output.fasta
   
   ```

   接下来, 提取PurZ序列：

   ```python
   from Bio import SeqIO
   
   # 输入文件路径
   aligned_fasta = "/Users/liweihang/BT1051/Project3/3_/PurZ_aligned_output.fasta"
   unique_fasta = "/Users/liweihang/BT1051/Project3/3_/PurZ_unique.fasta"
   
   # 要提取的位置（1-based）
   positions = [14, 234, 297]
   
   # 输出文件路径
   output_fasta = "/Users/liweihang/BT1051/Project3/3_/PurZ_SIN_sequences.fasta"
   
   # 获取完整的序列字典
   unique_sequences = {record.id: str(record.seq) for record in SeqIO.parse(unique_fasta, "fasta")}
   
   # 存储符合条件的序列
   matching_sequences = []
   
   # 处理比对后的序列
   for record in SeqIO.parse(aligned_fasta, "fasta"):
       seq = str(record.seq)
       # 提取指定位置的氨基酸
       aas = [seq[p - 1] if p <= len(seq) else "-" for p in positions]
       
       # 检查是否符合 SIN（S、I、N）
       if aas == ['S', 'I', 'N']:
           # 获取完整序列（用完整序列填充比对序列）
           full_seq = unique_sequences.get(record.id, None)
           if full_seq:
               # 如果有完整的序列，替换比对序列的缺失部分
               matching_sequences.append(f">{record.id}\n{full_seq}\n")
           else:
               # 如果没有找到完整序列，保留原有比对序列
               matching_sequences.append(f">{record.id}\n{seq}\n")
   
   # 输出符合条件的序列
   with open(output_fasta, "w") as out_f:
       out_f.writelines(matching_sequences)
   
   print(f"提取完成！符合条件的序列已保存到: {output_fasta}")
   
   ```

   ![截屏2025-04-12 20.18.12](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 20.18.12.png)

   1. 结构：

      导出的表格中能找到一个：6FKO, 在下图绿色部分标出

      ![截屏2025-04-12 21.51.56](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 21.51.56.png)

      ![](/Users/liweihang/BT1051/Project3/3_Image/PDB_PurZ_75.png)

      ![](/Users/liweihang/BT1051/Project3/3_Image/PDB_PurZ_120.png)

      2. 功能：0004019 adenylosuccinate synthase activity|0005524 ATP binding|0000287 magnesium ion binding

         下图黄色：

         ![](/Users/liweihang/BT1051/Project3/3_Image/Funtion_PurZ_75.png)

         ![Funtion_PurZ_120](/Users/liweihang/BT1051/Project3/3_Image/Funtion_PurZ_120.png)

         

      3. 重要氨基酸：

         酶活口袋（PDB：6FM0, 6FM1图源：https://www.science.org/doi/10.1126/science.abe6494)

         ![截屏2025-04-12 22.09.34](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 22.09.34.png)

         ![截屏2025-04-12 22.26.35](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 22.26.35.png)

         图：Fixation of ATP in PurZ (6FM0), hydrogen bonds are indicated ；  Fixation of dGMP in PurZ (6FM1), hydrogen bonds are indicated. 

         重要氨基酸：选择140位，201位

         ```bash
         #统计结果
         KA140 - Amino Acid Frequency:
           I: 272
           V: 104
           M: 93
           L: 29
           A: 8
           T: 5
           C: 2
           S: 2
         
         KA201 - Amino Acid Frequency:
           C: 211
           T: 192
           V: 105
           S: 4
           A: 2
           N: 1
         ```

         组合一（绿色）：201C, 140I

         组合二（蓝色）：201T, 140I

         组合三（粉色）：201V, 140I

         组合四（红色）：201C, 140V

         组合五（黄色）：201T, 140V

         组合六（橙色）：201V, 140V

         组合七（灰色）：其他

         ![](/Users/liweihang/BT1051/Project3/3_Image/KeyAA75.png)

         ![KeyAA120](/Users/liweihang/BT1051/Project3/3_Image/KeyAA120.png)

         ![](/Users/liweihang/BT1051/Project3/3_Image/GNN.png)

         

         

4. **Choose 5 PurZ0s and 5 PurZs from phages, and 5 PurAs from representative bacteria, archaea and eukaryotes to make a multiple sequence alignment (MSA). What alignment method do you choose? Why?**

   PurA的Archaea比较难找，可在Uniprot中打开Lineage来检索：

   ![](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 14.34.59.png)

   选择以下4种来做MSA

   ![截屏2025-04-12 14.45.28](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 14.45.28.png)

   ```bash
   #合并文件
   cat *.fasta > CombinePurA_Z_Z0.fasta
   ```

   选择的Alignment Method:  mafft linsi

   原因如下：

   1. PurZ0、PurZ和PurA蛋白序列,可能具有较远的同源性，而LINSI是MAFFT中最精确的算法之一，特别适合：序列相似性较低的蛋白家族以及需要高精度比对的进化分析
   2. **生物学合理性**：对于跨越细菌、古菌和真核生物的不同Purine生物合成相关蛋白的比对，需要能够处理序列长度变异和保守域排列的算法。

   ```bash
   #使用mafft linsi制作上述序列的MSA
   linsi --thread 8 --reorder /Users/liweihang/BT1051/Project3/4_/CombinePurA_Z_Z0.fasta > /Users/liweihang/BT1051/Project3/4_/CombinePurA_Z_Z0_aligned.fasta
   ```

   

5. **When making a phylogenetic tree based on the MSA you made in 4, choose the properamino acid/nucleotide substitution model is important. You may use methods such as jmodeltest/prottest(涉及到java，可以在服务器里做)/Modelfinder to choose the model you need, and you can use BIC or AIC as the criteria for model choosing. For this case, what model do you choose according to BIC? Use the NJ method to build a phylogenetic tree and evaluate the tree through bootstrapping(300 times) and label the bootstrapping results on your tree. From your phylogenetic tree, can you infer the evolutionary origin of PurZ?**

   

下载prottest，modeltest和iqtree

```bash
conda install -c bioconda iqtree
```

```bash
#自动使用BIC标准（默认行为）,在LG、WAG、JTT等常见氨基酸模型中比较选择最佳模型,生成 model_test.log 文件包含最佳模型信息
iqtree -s CombinePurA_Z_Z0_aligned_.fasta -m MF -mset LG,WAG,JTT -pre model_test
#查看最佳模型结果
(BT1051) liweihang@Mac-3 5_ % grep "Best-fit model" model_test.log
Best-fit model: WAG+I+G4 chosen according to BIC
#使用找到的模型构建NJ树
iqtree2 -s CombinePurA_Z_Z0_aligned_.fasta -m WAG+I+G4 -b 300 -n 0 -pre PurZ_NJ_tree
# 查看构建的树文件（Newick格式）
cat PurZ_NJ_tree.treefile
# 查看bootstrap支持率
grep "Bootstrap values" PurZ_NJ_tree.log
```

在ITOL网站观察进化树

网站：https://itol.embl.de/tree； 上传文件：/Users/liweihang/BT1051/Project3/5_/PurZ_NJ_tree.contree

![截屏2025-04-12 20.55.36](/Users/liweihang/Library/Application Support/typora-user-images/截屏2025-04-12 20.55.36.png)

红色：PurZ0

绿色：PurA

无标记：PurZ

可以看到PurZ0确实处于PurA和PurZ之间